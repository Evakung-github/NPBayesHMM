NPBayesHMM : Nonparametric Bayesian HMM toolbox, for Matlab
Website: http://michaelchughes.github.com/NPBayesHMM/
Author:  Mike Hughes (www.michaelchughes.com)
Please email all comments/questions to mike <AT> michaelchughes.com

This toolbox provides code for running Markov chain Monte Carlo (MCMC) posterior
inference for a variety of NPBayes models for sequential data.  Currently, only 
the Beta Process (BP) HMM is fully supported, but releases for HDP-HMM and othe models are planned.

The repository is organized as follows:  
  code/ contains relevant Matlab code. This should be the working dir in Matlab.
        within code/, you can find a fast intro script in code/demo/EasyDemo.m
  doc/  contains human-readable documentation.
        QuickStartGuide.pdf in particular describes how to configure the code.
  data/ contains one example dataset (6 Mocap sequences of various exercises)
        See the demos for how to run posterior inference on this data. 
        Other example datasets (from our NIPS 2012 paper) are available by contacting Mike via email.
      
Look for additional documentation and occasional updates on github:
   https://github.com/michaelchughes/NPBayesHMM/
     
If you find this toolbox useful, please cite our NIPS 2012 paper:
M. Hughes, E. Fox, and E. Sudderth. 
"Effective Split-Merge Monte Carlo Methods for Nonparametric Models of Sequential Data". 
Advances of Neural Information Processing Systems (NIPS) 2012.
http://web.michaelchughes.com/research/bp-hmm-split-merge-inference/HughesFoxSudderth_NIPS2012.pdf

This software is released under the Simple Public License 2.0, a permissive, 
copyleft license.  Please see the LICENSE file for details.

Acknowledgements:
This code is inspired by (and heavily based upon) the
BP-AR-HMM toolbox, released by Emily Fox. Most functions have been completely 
re-written for speed, readability, and extensibility, but Emily deserves most
credit for coming up with the original solid inference algorithms.

I also thank Tom Minka for his excellent Lightspeed toolbox, and the development team at Eigen for a blazingly-fast matrix library, which made the HMM dynamic programming routines much much faster. Thanks also to William Allen for providing baseline code for these efficient routines.
